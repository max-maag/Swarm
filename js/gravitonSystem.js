// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["entityProcessingSystem", "vector", "position", "acceleration", "graviton"], function(EntityProcessingSystem, Vector, Position, Acceleration, Graviton) {
    var GravitonSystem;
    return GravitonSystem = (function(_super) {
      __extends(GravitonSystem, _super);

      function GravitonSystem(swarmSystem) {
        this.swarmSystem = swarmSystem;
        GravitonSystem.__super__.constructor.call(this, ["position", "graviton"]);
      }

      GravitonSystem.prototype.processEntity = function(e, dt) {
        var acc, dist, dist2, i, s, vec, _i, _len, _ref, _results;
        _ref = Object.keys(this.swarmSystem.entities);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          s = this.swarmSystem.entities[i];
          vec = Vector.sub(e.position.vector, s.position.vector);
          dist2 = Vector.distSquared(e.position.vector, s.position.vector);
          dist = Math.sqrt(dist2);
          if (dist < e.graviton.range) {
            acc = e.graviton.force * (1 - dist / e.graviton.range);
            s.acceleration.vector.x += acc * vec.x / dist;
            _results.push(s.acceleration.vector.y += acc * vec.y / dist);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      return GravitonSystem;

    })(EntityProcessingSystem);
  });

}).call(this);
