// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define([], function() {

    /*
      Methods like add, sub and dot can either take (number, number), (PIXI.Point) or (Vector).
     */
    var Vector;
    return Vector = (function() {
      Vector.prototype._handleArg = function(v, handler) {
        var t;
        t = typeof v;
        if (handler[t] != null) {
          return handler[t]();
        } else {
          return console.error("unexpected argument of type " + t);
        }
      };


      /*
        args: (number, number), (PIXI.Point), or ()
       */

      function Vector(x, y) {
        this.slerp = __bind(this.slerp, this);
        this.toString = __bind(this.toString, this);
        this.normalize = __bind(this.normalize, this);
        this.length = __bind(this.length, this);
        this.lengthSquared = __bind(this.lengthSquared, this);
        this.dot = __bind(this.dot, this);
        this.mul = __bind(this.mul, this);
        this.sub = __bind(this.sub, this);
        this.add = __bind(this.add, this);
        this.set = __bind(this.set, this);
        this.foreach = __bind(this.foreach, this);
        this.x = 0;
        this.y = 0;
        this._handleArg(x, {
          'number': (function(_this) {
            return function() {
              return _this.set(x, y);
            };
          })(this),
          'object': (function(_this) {
            return function() {
              return _this.set(x.x, x.y);
            };
          })(this),
          'undefined': (function(_this) {
            return function() {
              return _this.set(0, 0);
            };
          })(this)
        });
      }

      Vector.prototype.foreach = function(f) {
        this.x = f(this.x);
        this.y = f(this.y);
        return this;
      };

      Vector.prototype.set = function(x, y) {
        this._handleArg(x, {
          'number': (function(_this) {
            return function() {
              _this.x = x;
              return _this.y = y;
            };
          })(this),
          'object': (function(_this) {
            return function() {
              _this.x = x.x;
              return _this.y = x.y;
            };
          })(this)
        });
        return this;
      };

      Vector.prototype.add = function(x, y) {
        this._handleArg(x, {
          'number': (function(_this) {
            return function() {
              _this.x += x;
              return _this.x += y;
            };
          })(this),
          'object': (function(_this) {
            return function() {
              _this.x += x.x;
              return _this.y += x.y;
            };
          })(this)
        });
        return this;
      };

      Vector.prototype.sub = function(x, y) {
        this._handleArg(x, {
          'number': (function(_this) {
            return function() {
              _this.x -= x;
              return _this.x -= y;
            };
          })(this),
          'object': (function(_this) {
            return function() {
              _this.x -= x.x;
              return _this.y -= x.y;
            };
          })(this)
        });
        return this;
      };

      Vector.prototype.mul = function(x) {
        this.x *= x;
        this.y *= x;
        return this;
      };

      Vector.prototype.dot = function(v) {
        return this.x * v.x + this.y * v.y;
      };

      Vector.prototype.lengthSquared = function() {
        return this.x * this.x + this.y * this.y;
      };

      Vector.prototype.length = function() {
        return Math.sqrt(this.lengthSquared());
      };

      Vector.prototype.normalize = function() {
        return this.mul(1 / this.length());
      };

      Vector.prototype.toString = function() {
        return "[" + this.x + "," + this.y + "]";
      };

      Vector.prototype.slerp = function(x, y, t) {
        var l, o, so, v;
        if (t == null) {
          t = y;
        }
        v = this._handleArg(x, {
          'number': function() {},
          'object': function() {
            return x.normalize();
          }
        });
        l = this.length();
        this.normalize();
        o = Math.acos(this.dot(v));
        so = Math.sin(o);
        this.mul(Math.sin((1 - t) * o) / so);
        this.add(v.mul(Math.sin(t * o) / so));
        return this.mul(l);
      };

      Vector.add = function(a, b, res) {
        if (res == null) {
          res = new Vector();
        }
        return res.set(a).add(b);
      };

      Vector.sub = function(a, b, res) {
        if (res == null) {
          res = new Vector();
        }
        return res.set(a).sub(b);
      };

      Vector.mul = function(a, b, res) {
        if (res == null) {
          res = new Vector();
        }
        return res.set(a).mul(b);
      };

      Vector.dot = function(a, b, res) {
        if (res == null) {
          res = new Vector();
        }
        return res.set(a).dot(b);
      };

      Vector.dist = function(a, b, res) {
        if (res == null) {
          res = new Vector();
        }
        return res.set(a).sub(b).length();
      };

      Vector.distSquared = function(a, b, res) {
        if (res == null) {
          res = new Vector();
        }
        return res.set(a).sub(b).lengthSquared();
      };

      Vector.slerp = function(a, b, t, res) {
        if (res == null) {
          res = new Vector();
        }
        return res.set(a).slerp(b, t);
      };

      return Vector;

    })();
  });

}).call(this);
