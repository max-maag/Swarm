// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["entityProcessingSystem", "vector", "position", "acceleration", "swarm"], function(EntityProcessingSystem, Vector, Position, Acceleration, Swarm) {
    var SwarmSystem;
    return SwarmSystem = (function(_super) {
      __extends(SwarmSystem, _super);

      function SwarmSystem() {
        SwarmSystem.__super__.constructor.call(this, ["position", "acceleration", "swarm"]);
      }

      SwarmSystem.prototype.processEntity = function(e, dt) {
        var acc, accx, accy, dist, i, index, list, o, _i;
        accx = (Math.random() * 2 - 1) / 10000;
        accy = (Math.random() * 2 - 1) / 10000;
        list = Object.keys(this.entities);
        for (i = _i = 0; _i <= 9; i = ++_i) {
          index = Math.round(Math.random() * (list.length - 1));
          o = this.entities[list[index]];
          if (o === e) {
            continue;
          }
          acc = 0;
          dist = Vector.distSquared(e.position.vector, o.position.vector);
          if (dist > e.swarm.max * e.swarm.max) {
            acc = -e.swarm.maxForce;
          }
          if (dist > e.swarm.lose * e.swarm.lose) {
            acc = 0;
          }
          if (dist < e.swarm.min * e.swarm.min) {
            acc = e.swarm.minForce;
          }
          if (o.position.vector.x - e.position.vector.x > 0) {
            accx -= Math.random() * acc;
          } else {
            accx += Math.random() * acc;
          }
          if (o.position.vector.y - e.position.vector.y > 0) {
            accy -= Math.random() * acc;
          } else {
            accy += Math.random() * acc;
          }
        }
        e.acceleration.vector.x = accx;
        return e.acceleration.vector.y = accy;
      };

      return SwarmSystem;

    })(EntityProcessingSystem);
  });

}).call(this);
