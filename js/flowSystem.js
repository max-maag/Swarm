// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["entityProcessingSystem", "vector"], function(EntityProcessingSystem, Vector) {
    var FlowSystem;
    return FlowSystem = (function(_super) {
      __extends(FlowSystem, _super);

      function FlowSystem(swarmSystem) {
        this.swarmSystem = swarmSystem;
        FlowSystem.__super__.constructor.call(this, ["position", "flow"]);
      }

      FlowSystem.prototype.processEntity = function(e, dt) {
        var ang, dist, i, s, vec, _i, _len, _ref, _results;
        _ref = Object.keys(this.swarmSystem.entities);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          s = this.swarmSystem.entities[i];
          vec = Vector.sub(e.position.vector, s.position.vector);
          dist = vec.length();
          ang = vec.dot(e.flow.vector) / dist / e.flow.vector.length();
          if (dist < e.flow.range && ang <= -e.flow.ang) {
            _results.push(s.position.vector.add(Vector.mul(e.flow.vector, dt * (1 - dist / e.flow.range))));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      return FlowSystem;

    })(EntityProcessingSystem);
  });

}).call(this);
