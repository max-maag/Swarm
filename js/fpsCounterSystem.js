// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['entityProcessingSystem', 'fpsCounter'], function(EntityProcessingSystem, FpsCounter) {
    var FpsCounterSystem;
    return FpsCounterSystem = (function(_super) {
      __extends(FpsCounterSystem, _super);

      function FpsCounterSystem(container) {
        this.container = container;
        FpsCounterSystem.__super__.constructor.call(this, ['fpsCounter']);
        this.fps = 0;
        this.frameCount = 0;
        this.curSeconds = Date.now();
      }

      FpsCounterSystem.prototype.onEntityAdded = function(e) {
        return this.container.addChild(e.fpsCounter.view);
      };

      FpsCounterSystem.prototype.onEntityRemoved = function(e) {
        return this.container.removeChild(e.fpsCounter.view);
      };

      FpsCounterSystem.prototype.process = function(dt) {
        if (Date.now() - this.curSeconds < 1000) {
          return this.frameCount++;
        } else {
          this.fps = this.frameCount;
          this.frameCount = 1;
          this.curSeconds = Date.now();
          return FpsCounterSystem.__super__.process.call(this, dt);
        }
      };

      FpsCounterSystem.prototype.processEntity = function(e, dt) {
        return e.fpsCounter.view.setText("" + this.fps + " FPS");
      };

      return FpsCounterSystem;

    })(EntityProcessingSystem);
  });

}).call(this);
