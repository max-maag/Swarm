// Generated by CoffeeScript 1.8.0
(function() {
  define(['perlinNoise'], function(PerlinNoise) {
    var ChunkGenerator;
    return ChunkGenerator = (function() {

      /*
      Generates a chunk
       */
      function ChunkGenerator() {
        this.perl = new SimplexNoise;
        this.noiseFactor = 20;
        this.tiles = [
          {
            name: "blue",
            isWall: false,
            frequency: 10
          }, {
            name: "orange",
            isWall: true,
            frequency: 30
          }, {
            name: "green",
            isWall: true,
            frequency: 35
          }
        ];
      }


      /*
        returns an (generated) chunk
        @param {chunk} chunk the chunk that should be generated
       */

      ChunkGenerator.prototype.generate = function(chunk) {
        var choosenTile, freqSum, perlinRand, threshold, tile, x, y, _i, _ref, _results;
        _results = [];
        for (x = _i = 0, _ref = chunk.tiles.length; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _k, _l, _len, _len1, _ref1, _ref2, _ref3, _results1;
            _results1 = [];
            for (y = _j = 0, _ref1 = chunk.tiles[x].length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
              freqSum = 0;
              _ref2 = this.tiles;
              for (_k = 0, _len = _ref2.length; _k < _len; _k++) {
                tile = _ref2[_k];
                freqSum += tile.frequency;
              }
              perlinRand = this.perl.noise((x + (chunk.offset.x * chunk.dimension)) / this.noiseFactor, (y + (chunk.offset.y * chunk.dimension)) / this.noiseFactor);
              threshold = freqSum * perlinRand;
              freqSum = 0;
              choosenTile = this.tiles[0];
              _ref3 = this.tiles;
              for (_l = 0, _len1 = _ref3.length; _l < _len1; _l++) {
                tile = _ref3[_l];
                freqSum += tile.frequency;
                choosenTile = tile;
                if (freqSum > threshold) {
                  break;
                }
              }
              _results1.push(chunk.tiles[x][y].update(choosenTile.name, choosenTile.isWall));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      return ChunkGenerator;

    })();
  });

}).call(this);
