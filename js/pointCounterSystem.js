// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['entityProcessingSystem', 'fpsCounter', 'vector'], function(EntityProcessingSystem, FpsCounter, Vector) {
    var PointCounterSystem;
    return PointCounterSystem = (function(_super) {
      __extends(PointCounterSystem, _super);

      function PointCounterSystem(container, swarmSystem) {
        this.container = container;
        this.swarmSystem = swarmSystem;
        PointCounterSystem.__super__.constructor.call(this, ['pointCounter']);
        this.points = 0;
      }

      PointCounterSystem.prototype.onEntityAdded = function(e) {
        return this.container.addChild(e.pointCounter.view);
      };

      PointCounterSystem.prototype.onEntityRemoved = function(e) {
        return this.container.removeChild(e.pointCounter.view);
      };

      PointCounterSystem.prototype.process = function(dt) {
        if (Date.now() - this.curSeconds < 1000) {
          return 5;
        } else {
          return PointCounterSystem.__super__.process.call(this, dt);
        }
      };

      PointCounterSystem.prototype.processEntity = function(e, dt) {
        var dist, dist2, i, s, temp, vec, _i, _len, _ref;
        e.pointCounter.view.setText("Points: " + this.points);
        temp = 0;
        _ref = Object.keys(this.swarmSystem.entities);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          s = this.swarmSystem.entities[i];
          vec = Vector.sub(e.position.vector, s.position.vector);
          dist2 = Vector.distSquared(e.position.vector, s.position.vector);
          dist = Math.sqrt(dist2);
          temp += Math.round(dist / 100);
        }
        return this.points = temp;
      };

      return PointCounterSystem;

    })(EntityProcessingSystem);
  });

}).call(this);
