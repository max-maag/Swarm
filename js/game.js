// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['world', 'renderer', 'movement', 'lonelyMovement', 'entityFactory', 'testFactory', 'gravitonFactory', 'flowFactory', 'fpsCounterFactory', 'fpsCounterSystem', 'pointCounterFactory', 'pointCounterSystem', 'swarmSystem', 'inputSystem', 'inputEvent', 'entity', 'gravitonSystem', 'flowSystem', 'map', 'vector', 'tileCollisionSystem'], function(World, Renderer, Movement, LonelyMovement, EntityFactory, TestFactory, GravitonFactory, FlowFactory, FpsCounterFactory, FpsCounterSystem, PointCounterFactory, PointCounterSystem, SwarmSystem, InputSystem, InputEvent, Entity, GravitonSystem, FlowSystem, Map, Vector, TileCollisionSystem) {
    var Game;
    return Game = (function() {
      function Game(render, stage, gameContainer, renderview) {
        var dim, i, pos, swarmCount, swarmSystem, tilesize, tres, _i;
        this.render = render;
        this.stage = stage;
        this.gameContainer = gameContainer;
        this.renderview = renderview;
        this.renderloop = __bind(this.renderloop, this);
        this.step = __bind(this.step, this);
        this.gameContainerAccelx = -150;
        this.gameContainerAccely = -150;
        this.lastFrame = Date.now();
        this.timestep = 10;
        this.fps = 0;
        this.frameCount = 0;
        this.curSeconds = Date.now();
        this.fpsview = new PIXI.Text("-- FPS", {
          font: "20px Arial",
          fill: "red"
        });
        this.fpsview.position.x = 10;
        this.fpsview.position.y = 30;
        this.stage.addChild(this.fpsview);
        this.mouse = PIXI.Sprite.fromImage("../res/img/mouse.png");
        this.stage.addChild(this.mouse);
        this.mouseicons = ['graviton', 'play'];
        this.mouseiconid = 0;
        this.mouseicon = PIXI.Sprite.fromImage("../res/img/" + this.mouseicons[0] + ".png");
        this.stage.addChild(this.mouseicon);
        pos = new Vector(0, 0);
        tres = 11;
        dim = 5;
        tilesize = 20;
        this.map = new Map(pos, tres, dim, tilesize, this.gameContainer);
        this.world = new World();
        swarmSystem = new SwarmSystem();
        this.world.addSystem(swarmSystem);
        this.world.addSystem(new GravitonSystem(swarmSystem));
        this.world.addSystem(new LonelyMovement());
        this.world.addSystem(new Movement);
        this.world.addSystem(new FlowSystem(swarmSystem));
        this.world.addSystem(new TileCollisionSystem(this.map));
        this.world.addSystem(new Renderer(this.gameContainer));
        this.world.addSystem(new InputSystem(this.world, this.gameContainer, this.mouseiconid));
        this.world.addSystem(new FpsCounterSystem(this.stage));
        this.world.addSystem(new PointCounterSystem(this.stage, swarmSystem));
        swarmCount = 10;
        for (i = _i = 1; 1 <= swarmCount ? _i <= swarmCount : _i >= swarmCount; i = 1 <= swarmCount ? ++_i : --_i) {
          this.world.addEntity(TestFactory.build(1500 + Math.cos(i / 2 / Math.PI), 1500 + Math.sin(i / 2 / Math.PI)));
        }
        this.world.addEntity(FpsCounterFactory.build());
        this.world.addEntity(PointCounterFactory.build());
        this.renderview.onmousedown = (function(_this) {
          return function(event) {
            event.iconid = _this.mouseiconid;
            return _this.world.addEntity(new Entity(new InputEvent(event)));
          };
        })(this);
        this.renderview.onmousemove = (function(_this) {
          return function(event) {
            _this.mouse.position.x = event.offsetX;
            _this.mouse.position.y = event.offsetY;
            _this.mouseicon.position.x = 20 + event.offsetX;
            return _this.mouseicon.position.y = 3 + event.offsetY;
          };
        })(this);
      }

      Game.prototype.step = function() {
        var dt, newname, pixelstep;
        dt = Date.now() - this.lastFrame;
        if (dt > 1000) {
          this.lastFrame = Date.now();
          return;
        }
        pixelstep = dt / 5;
        this.gameContainerAccelx *= .9;
        this.gameContainerAccely *= .9;
        this.gameContainer.position.x += this.gameContainerAccelx;
        this.gameContainer.position.y += this.gameContainerAccely;
        this.map.move(new Vector(0, -this.gameContainerAccely));
        this.map.move(new Vector(-this.gameContainerAccelx, 0));
        if (input.keydown(input.KEY.S)) {
          this.gameContainerAccely -= pixelstep;
        }
        if (input.keydown(input.KEY.W)) {
          this.gameContainerAccely += pixelstep;
        }
        if (input.keydown(input.KEY.D)) {
          this.gameContainerAccelx -= pixelstep;
        }
        if (input.keydown(input.KEY.A)) {
          this.gameContainerAccelx += pixelstep;
        }
        if (input.keyhit(input.KEY.E)) {
          this.mouseiconid = ((++this.mouseiconid % this.mouseicons.length) + this.mouseicons.length) % this.mouseicons.length;
          newname = this.mouseicons[this.mouseiconid];
          this.mouseicon.setTexture(PIXI.Texture.fromImage('../res/img/' + newname + '.png'));
        }
        if (input.keyhit(input.KEY.Q)) {
          this.mouseiconid = ((--this.mouseiconid % this.mouseicons.length) + this.mouseicons.length) % this.mouseicons.length;
          newname = this.mouseicons[this.mouseiconid];
          this.mouseicon.setTexture(PIXI.Texture.fromImage('../res/img/' + newname + '.png'));
        }
        this.timestep = 5;
        while (dt >= this.timestep) {
          this.world.update(this.timestep);
          dt -= this.timestep;
          this.lastFrame += this.timestep;
        }
        return input.flushkeys();
      };

      Game.prototype.renderloop = function() {
        if (Date.now() - this.curSeconds < 1000) {
          this.frameCount++;
        } else {
          this.fps = this.frameCount;
          this.frameCount = 1;
          this.curSeconds = Date.now();
          this.fpsview.setText("" + this.fps + " FPS");
        }
        this.step();
        this.render();
        return requestAnimFrame(this.renderloop);
      };

      return Game;

    })();
  });

}).call(this);
