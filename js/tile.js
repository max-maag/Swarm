// Generated by CoffeeScript 1.8.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define([], function() {
    var Tile;
    return Tile = (function() {

      /*
      Creates a Tile
      @param {string} @name tile name
      @param {boolean} @isWall true if the player can walk over this tile
       */
      function Tile(name, isWall, gameContainer, pos, relPos, size) {
        this.name = name;
        this.isWall = isWall;
        this.gameContainer = gameContainer;
        this.pos = pos;
        this.relPos = relPos;
        this.size = size;
        this.textureCache = {};
        this.sprite = new PIXI.Sprite();
        this.sprite.width = this.size / 256;
        this.sprite.height = this.size / 256;
        this.gameContainer.addChild(this.sprite);
        this.update(this.name, this.isWall);
      }

      Tile.prototype.update = function(name, isWall) {
        var _ref;
        this.name = name;
        this.isWall = isWall;
        if (!(_ref = this.name, __indexOf.call(this.textureCache, _ref) >= 0)) {
          this.textureCache[this.name] = PIXI.Texture.fromImage("../res/img/tile_" + this.name + ".png");
        }
        return this.sprite.setTexture(this.textureCache[this.name]);
      };

      Tile.prototype.updatePos = function(pos, x, y) {
        this.pos = pos;
        this.relPos.set(x, y);
        this.sprite.position.x = this.relPos.x;
        return this.sprite.position.y = this.relPos.y;
      };

      Tile.prototype.toString = function() {
        return this.name + ": [" + this.pos.x + "," + this.pos.y + "]";
      };

      return Tile;

    })();
  });

}).call(this);
